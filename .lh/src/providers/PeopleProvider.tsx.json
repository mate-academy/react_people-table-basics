{
    "sourceFile": "src/providers/PeopleProvider.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1715683144413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715683886615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,12 +42,12 @@\n           {},\n         );\n \n         setPeople(\n-          data.map(d => ({\n-            ...d,\n-            mother: d.motherName ? mapped[d.motherName] : undefined,\n-            father: d.fatherName ? mapped[d.fatherName] : undefined,\n+          data.map(data => ({\n+            ...data,\n+            mother: data.motherName ? mapped[data.motherName] : undefined,\n+            father: data.fatherName ? mapped[data.fatherName] : undefined,\n           })),\n         );\n       })\n       .catch(() => setError(true))\n"
                },
                {
                    "date": 1715683967261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,12 +42,12 @@\n           {},\n         );\n \n         setPeople(\n-          data.map(data => ({\n-            ...data,\n-            mother: data.motherName ? mapped[data.motherName] : undefined,\n-            father: data.fatherName ? mapped[data.fatherName] : undefined,\n+          data.map(d => ({\n+            ...d,\n+            mother: d.motherName ? mapped[d.motherName] : undefined,\n+            father: d.fatherName ? mapped[d.fatherName] : undefined,\n           })),\n         );\n       })\n       .catch(() => setError(true))\n"
                }
            ],
            "date": 1715683144413,
            "name": "Commit-0",
            "content": "import {\n  FC,\n  PropsWithChildren,\n  createContext,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { useParams } from 'react-router-dom';\n\ninterface PeopleContextI {\n  people: Person[];\n  activePerson?: Person;\n  error: boolean;\n  pending: boolean;\n}\n\nconst PeopleContext = createContext<PeopleContextI>({\n  people: [],\n  error: false,\n  pending: false,\n});\n\nexport const PeopleProvider: FC<PropsWithChildren> = ({ children }) => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [error, setError] = useState(false);\n  const [pending, setPending] = useState(false);\n  const { slug } = useParams();\n\n  useEffect(() => {\n    setPending(true);\n    getPeople()\n      .then(data => {\n        const mapped = data.reduce<{ [key: string]: Person }>(\n          (prev, curr) => ({\n            ...prev,\n            [curr.name]: curr,\n          }),\n          {},\n        );\n\n        setPeople(\n          data.map(d => ({\n            ...d,\n            mother: d.motherName ? mapped[d.motherName] : undefined,\n            father: d.fatherName ? mapped[d.fatherName] : undefined,\n          })),\n        );\n      })\n      .catch(() => setError(true))\n      .finally(() => setPending(false));\n  }, []);\n\n  const activePerson = useMemo(\n    () => people.find(p => p.slug === slug),\n    [slug, people],\n  );\n\n  const value = {\n    people,\n    activePerson,\n    error,\n    pending,\n  };\n\n  return (\n    <PeopleContext.Provider value={value}>{children}</PeopleContext.Provider>\n  );\n};\n\nexport const usePeople = () => useContext(PeopleContext);\n"
        }
    ]
}