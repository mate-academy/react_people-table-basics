{
    "sourceFile": "src/components/people.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1715938516358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715938536185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useEffect, useState } from 'react';\n-import { Loader } from '../Loader';\n+import { Loader } from './Loader/Loader';\n import { PeopleTable } from '../PeopleTable/PeopleTable';\n import { Person } from '../../types';\n import { getPeople } from '../../api';\n import { getPeopleWithParents } from '../../services/getPeopleWithParents';\n"
                },
                {
                    "date": 1715938548359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import React, { useEffect, useState } from 'react';\n+import { Loader } from './Loader/Loader';\n+import { PeopleTable } from '../PeopleTable/PeopleTable';\n+import { Person } from './';\n+import { getPeople } from '../../api';\n+import { getPeopleWithParents } from '../../services/getPeopleWithParents';\n+\n+export const PeoplePage: React.FC = React.memo(() => {\n+  const [people, setPeople] = useState<Person[]>([]);\n+  const [error, setError] = useState(false);\n+  const [dataLoaded, setDataLoaded] = useState(false);\n+\n+  useEffect(() => {\n+    setError(false);\n+    setDataLoaded(false);\n+\n+    getPeople()\n+      .then(response => {\n+        setPeople(getPeopleWithParents(response));\n+        setDataLoaded(true);\n+      })\n+      .catch(() => {\n+        setError(true);\n+      });\n+  }, []);\n+\n+  return (\n+    <>\n+      <h1 className=\"title\">People Page</h1>\n+      <div className=\"block\">\n+        <div className=\"box table-container\">\n+          {!dataLoaded && !error && <Loader />}\n+\n+          {error && (\n+            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+              Something went wrong\n+            </p>\n+          )}\n+\n+          {dataLoaded && people.length === 0 && (\n+            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+          )}\n+\n+          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n+        </div>\n+      </div>\n+    </>\n+  );\n+});\n"
                },
                {
                    "date": 1715938554159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import React, { useEffect, useState } from 'react';\n+import { Loader } from './Loader/Loader';\n+import { PeopleTable } from '../PeopleTable/PeopleTable';\n+import { Person } from '.././';\n+import { getPeople } from '../../api';\n+import { getPeopleWithParents } from '../../services/getPeopleWithParents';\n+\n+export const PeoplePage: React.FC = React.memo(() => {\n+  const [people, setPeople] = useState<Person[]>([]);\n+  const [error, setError] = useState(false);\n+  const [dataLoaded, setDataLoaded] = useState(false);\n+\n+  useEffect(() => {\n+    setError(false);\n+    setDataLoaded(false);\n+\n+    getPeople()\n+      .then(response => {\n+        setPeople(getPeopleWithParents(response));\n+        setDataLoaded(true);\n+      })\n+      .catch(() => {\n+        setError(true);\n+      });\n+  }, []);\n+\n+  return (\n+    <>\n+      <h1 className=\"title\">People Page</h1>\n+      <div className=\"block\">\n+        <div className=\"box table-container\">\n+          {!dataLoaded && !error && <Loader />}\n+\n+          {error && (\n+            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+              Something went wrong\n+            </p>\n+          )}\n+\n+          {dataLoaded && people.length === 0 && (\n+            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+          )}\n+\n+          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n+        </div>\n+      </div>\n+    </>\n+  );\n+});\n"
                },
                {
                    "date": 1715938560687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import React, { useEffect, useState } from 'react';\n+import { Loader } from './Loader/Loader';\n+import { PeopleTable } from '../PeopleTable/PeopleTable';\n+import { Person } from '../types/Person';\n+import { getPeople } from '../../api';\n+import { getPeopleWithParents } from '../../services/getPeopleWithParents';\n+\n+export const PeoplePage: React.FC = React.memo(() => {\n+  const [people, setPeople] = useState<Person[]>([]);\n+  const [error, setError] = useState(false);\n+  const [dataLoaded, setDataLoaded] = useState(false);\n+\n+  useEffect(() => {\n+    setError(false);\n+    setDataLoaded(false);\n+\n+    getPeople()\n+      .then(response => {\n+        setPeople(getPeopleWithParents(response));\n+        setDataLoaded(true);\n+      })\n+      .catch(() => {\n+        setError(true);\n+      });\n+  }, []);\n+\n+  return (\n+    <>\n+      <h1 className=\"title\">People Page</h1>\n+      <div className=\"block\">\n+        <div className=\"box table-container\">\n+          {!dataLoaded && !error && <Loader />}\n+\n+          {error && (\n+            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+              Something went wrong\n+            </p>\n+          )}\n+\n+          {dataLoaded && people.length === 0 && (\n+            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+          )}\n+\n+          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n+        </div>\n+      </div>\n+    </>\n+  );\n+});\n"
                },
                {
                    "date": 1715938568955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import React, { useEffect, useState } from 'react';\n+import { Loader } from './Loader/Loader';\n+import { PeopleTable } from '../PeopleTable/PeopleTable';\n+import { Person } from '../types/Person';\n+import { getPeople } from '../';\n+import { getPeopleWithParents } from '../../services/getPeopleWithParents';\n+\n+export const PeoplePage: React.FC = React.memo(() => {\n+  const [people, setPeople] = useState<Person[]>([]);\n+  const [error, setError] = useState(false);\n+  const [dataLoaded, setDataLoaded] = useState(false);\n+\n+  useEffect(() => {\n+    setError(false);\n+    setDataLoaded(false);\n+\n+    getPeople()\n+      .then(response => {\n+        setPeople(getPeopleWithParents(response));\n+        setDataLoaded(true);\n+      })\n+      .catch(() => {\n+        setError(true);\n+      });\n+  }, []);\n+\n+  return (\n+    <>\n+      <h1 className=\"title\">People Page</h1>\n+      <div className=\"block\">\n+        <div className=\"box table-container\">\n+          {!dataLoaded && !error && <Loader />}\n+\n+          {error && (\n+            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+              Something went wrong\n+            </p>\n+          )}\n+\n+          {dataLoaded && people.length === 0 && (\n+            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+          )}\n+\n+          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n+        </div>\n+      </div>\n+    </>\n+  );\n+});\n"
                },
                {
                    "date": 1715938726676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import React, { useEffect, useState } from 'react';\n+import { Loader } from './Loader/Loader';\n+import { PeopleTable } from './';\n+import { Person } from '../types/Person';\n+import { getPeople } from '../api';\n+import { getPeopleWithParents } from '../../services/getPeopleWithParents';\n+\n+export const PeoplePage: React.FC = React.memo(() => {\n+  const [people, setPeople] = useState<Person[]>([]);\n+  const [error, setError] = useState(false);\n+  const [dataLoaded, setDataLoaded] = useState(false);\n+\n+  useEffect(() => {\n+    setError(false);\n+    setDataLoaded(false);\n+\n+    getPeople()\n+      .then(response => {\n+        setPeople(getPeopleWithParents(response));\n+        setDataLoaded(true);\n+      })\n+      .catch(() => {\n+        setError(true);\n+      });\n+  }, []);\n+\n+  return (\n+    <>\n+      <h1 className=\"title\">People Page</h1>\n+      <div className=\"block\">\n+        <div className=\"box table-container\">\n+          {!dataLoaded && !error && <Loader />}\n+\n+          {error && (\n+            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+              Something went wrong\n+            </p>\n+          )}\n+\n+          {dataLoaded && people.length === 0 && (\n+            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+          )}\n+\n+          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n+        </div>\n+      </div>\n+    </>\n+  );\n+});\n"
                },
                {
                    "date": 1715938737303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import React, { useEffect, useState } from 'react';\n+import { Loader } from './Loader/Loader';\n+import { PeopleTable } from './PeopleTable';\n+import { Person } from '../types/Person';\n+import { getPeople } from '../api';\n+import { getPeopleWithParents } from '../Gettery/getPeopleWithParents';\n+\n+export const PeoplePage: React.FC = React.memo(() => {\n+  const [people, setPeople] = useState<Person[]>([]);\n+  const [error, setError] = useState(false);\n+  const [dataLoaded, setDataLoaded] = useState(false);\n+\n+  useEffect(() => {\n+    setError(false);\n+    setDataLoaded(false);\n+\n+    getPeople()\n+      .then(response => {\n+        setPeople(getPeopleWithParents(response));\n+        setDataLoaded(true);\n+      })\n+      .catch(() => {\n+        setError(true);\n+      });\n+  }, []);\n+\n+  return (\n+    <>\n+      <h1 className=\"title\">People Page</h1>\n+      <div className=\"block\">\n+        <div className=\"box table-container\">\n+          {!dataLoaded && !error && <Loader />}\n+\n+          {error && (\n+            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+              Something went wrong\n+            </p>\n+          )}\n+\n+          {dataLoaded && people.length === 0 && (\n+            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+          )}\n+\n+          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n+        </div>\n+      </div>\n+    </>\n+  );\n+});\n"
                },
                {
                    "date": 1715938747411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import React, { useEffect, useState } from 'react';\n+import { Loader } from './Loader/Loader';\n+import { PeopleTable } from './PeopleTable';\n+import { Person } from '../types/Person';\n+import { getPeople } from '../api';\n+import { getPeopleWithParents } from './';\n+\n+export const PeoplePage: React.FC = React.memo(() => {\n+  const [people, setPeople] = useState<Person[]>([]);\n+  const [error, setError] = useState(false);\n+  const [dataLoaded, setDataLoaded] = useState(false);\n+\n+  useEffect(() => {\n+    setError(false);\n+    setDataLoaded(false);\n+\n+    getPeople()\n+      .then(response => {\n+        setPeople(getPeopleWithParents(response));\n+        setDataLoaded(true);\n+      })\n+      .catch(() => {\n+        setError(true);\n+      });\n+  }, []);\n+\n+  return (\n+    <>\n+      <h1 className=\"title\">People Page</h1>\n+      <div className=\"block\">\n+        <div className=\"box table-container\">\n+          {!dataLoaded && !error && <Loader />}\n+\n+          {error && (\n+            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+              Something went wrong\n+            </p>\n+          )}\n+\n+          {dataLoaded && people.length === 0 && (\n+            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+          )}\n+\n+          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n+        </div>\n+      </div>\n+    </>\n+  );\n+});\n"
                },
                {
                    "date": 1715938752632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import React, { useEffect, useState } from 'react';\n+import { Loader } from './Loader/Loader';\n+import { PeopleTable } from './PeopleTable';\n+import { Person } from '../types/Person';\n+import { getPeople } from '../api';\n+import { getPeopleWithParents } from '../Gettery/';\n+\n+export const PeoplePage: React.FC = React.memo(() => {\n+  const [people, setPeople] = useState<Person[]>([]);\n+  const [error, setError] = useState(false);\n+  const [dataLoaded, setDataLoaded] = useState(false);\n+\n+  useEffect(() => {\n+    setError(false);\n+    setDataLoaded(false);\n+\n+    getPeople()\n+      .then(response => {\n+        setPeople(getPeopleWithParents(response));\n+        setDataLoaded(true);\n+      })\n+      .catch(() => {\n+        setError(true);\n+      });\n+  }, []);\n+\n+  return (\n+    <>\n+      <h1 className=\"title\">People Page</h1>\n+      <div className=\"block\">\n+        <div className=\"box table-container\">\n+          {!dataLoaded && !error && <Loader />}\n+\n+          {error && (\n+            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+              Something went wrong\n+            </p>\n+          )}\n+\n+          {dataLoaded && people.length === 0 && (\n+            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+          )}\n+\n+          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n+        </div>\n+      </div>\n+    </>\n+  );\n+});\n"
                },
                {
                    "date": 1715938759843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import React, { useEffect, useState } from 'react';\n+import { Loader } from './Loader/Loader';\n+import { PeopleTable } from './PeopleTable';\n+import { Person } from '../types/Person';\n+import { getPeople } from '../api';\n+import { getPeopleWithParents } from '../Gettery/getParents';\n+\n+export const PeoplePage: React.FC = React.memo(() => {\n+  const [people, setPeople] = useState<Person[]>([]);\n+  const [error, setError] = useState(false);\n+  const [dataLoaded, setDataLoaded] = useState(false);\n+\n+  useEffect(() => {\n+    setError(false);\n+    setDataLoaded(false);\n+\n+    getPeople()\n+      .then(response => {\n+        setPeople(getPeopleWithParents(response));\n+        setDataLoaded(true);\n+      })\n+      .catch(() => {\n+        setError(true);\n+      });\n+  }, []);\n+\n+  return (\n+    <>\n+      <h1 className=\"title\">People Page</h1>\n+      <div className=\"block\">\n+        <div className=\"box table-container\">\n+          {!dataLoaded && !error && <Loader />}\n+\n+          {error && (\n+            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+              Something went wrong\n+            </p>\n+          )}\n+\n+          {dataLoaded && people.length === 0 && (\n+            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+          )}\n+\n+          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n+        </div>\n+      </div>\n+    </>\n+  );\n+});\n"
                },
                {
                    "date": 1715938786649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import React, { useEffect, useState } from 'react';\n+import { Loader } from './Loader/Loader';\n+import { PeopleTable } from './PeopleTable';\n+import { Person } from '../types/Person';\n+import { getPeople } from '../api';\n+import { getPeopleWithParents } from '../Gettery/getPeopleWithParen';\n+\n+export const PeoplePage: React.FC = React.memo(() => {\n+  const [people, setPeople] = useState<Person[]>([]);\n+  const [error, setError] = useState(false);\n+  const [dataLoaded, setDataLoaded] = useState(false);\n+\n+  useEffect(() => {\n+    setError(false);\n+    setDataLoaded(false);\n+\n+    getPeople()\n+      .then(response => {\n+        setPeople(getPeopleWithParents(response));\n+        setDataLoaded(true);\n+      })\n+      .catch(() => {\n+        setError(true);\n+      });\n+  }, []);\n+\n+  return (\n+    <>\n+      <h1 className=\"title\">People Page</h1>\n+      <div className=\"block\">\n+        <div className=\"box table-container\">\n+          {!dataLoaded && !error && <Loader />}\n+\n+          {error && (\n+            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+              Something went wrong\n+            </p>\n+          )}\n+\n+          {dataLoaded && people.length === 0 && (\n+            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+          )}\n+\n+          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n+        </div>\n+      </div>\n+    </>\n+  );\n+});\n"
                },
                {
                    "date": 1715939368596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+/* eslint-disable react/display-name */\n import React, { useEffect, useState } from 'react';\n import { Loader } from './Loader/Loader';\n import { PeopleTable } from './PeopleTable';\n import { Person } from '../types/Person';\n@@ -46,494 +47,4 @@\n       </div>\n     </>\n   );\n });\n-import React, { useEffect, useState } from 'react';\n-import { Loader } from './Loader/Loader';\n-import { PeopleTable } from './PeopleTable';\n-import { Person } from '../types/Person';\n-import { getPeople } from '../api';\n-import { getPeopleWithParents } from '../Gettery/getParents';\n-\n-export const PeoplePage: React.FC = React.memo(() => {\n-  const [people, setPeople] = useState<Person[]>([]);\n-  const [error, setError] = useState(false);\n-  const [dataLoaded, setDataLoaded] = useState(false);\n-\n-  useEffect(() => {\n-    setError(false);\n-    setDataLoaded(false);\n-\n-    getPeople()\n-      .then(response => {\n-        setPeople(getPeopleWithParents(response));\n-        setDataLoaded(true);\n-      })\n-      .catch(() => {\n-        setError(true);\n-      });\n-  }, []);\n-\n-  return (\n-    <>\n-      <h1 className=\"title\">People Page</h1>\n-      <div className=\"block\">\n-        <div className=\"box table-container\">\n-          {!dataLoaded && !error && <Loader />}\n-\n-          {error && (\n-            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-              Something went wrong\n-            </p>\n-          )}\n-\n-          {dataLoaded && people.length === 0 && (\n-            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-          )}\n-\n-          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n-        </div>\n-      </div>\n-    </>\n-  );\n-});\n-import React, { useEffect, useState } from 'react';\n-import { Loader } from './Loader/Loader';\n-import { PeopleTable } from './PeopleTable';\n-import { Person } from '../types/Person';\n-import { getPeople } from '../api';\n-import { getPeopleWithParents } from '../Gettery/';\n-\n-export const PeoplePage: React.FC = React.memo(() => {\n-  const [people, setPeople] = useState<Person[]>([]);\n-  const [error, setError] = useState(false);\n-  const [dataLoaded, setDataLoaded] = useState(false);\n-\n-  useEffect(() => {\n-    setError(false);\n-    setDataLoaded(false);\n-\n-    getPeople()\n-      .then(response => {\n-        setPeople(getPeopleWithParents(response));\n-        setDataLoaded(true);\n-      })\n-      .catch(() => {\n-        setError(true);\n-      });\n-  }, []);\n-\n-  return (\n-    <>\n-      <h1 className=\"title\">People Page</h1>\n-      <div className=\"block\">\n-        <div className=\"box table-container\">\n-          {!dataLoaded && !error && <Loader />}\n-\n-          {error && (\n-            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-              Something went wrong\n-            </p>\n-          )}\n-\n-          {dataLoaded && people.length === 0 && (\n-            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-          )}\n-\n-          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n-        </div>\n-      </div>\n-    </>\n-  );\n-});\n-import React, { useEffect, useState } from 'react';\n-import { Loader } from './Loader/Loader';\n-import { PeopleTable } from './PeopleTable';\n-import { Person } from '../types/Person';\n-import { getPeople } from '../api';\n-import { getPeopleWithParents } from './';\n-\n-export const PeoplePage: React.FC = React.memo(() => {\n-  const [people, setPeople] = useState<Person[]>([]);\n-  const [error, setError] = useState(false);\n-  const [dataLoaded, setDataLoaded] = useState(false);\n-\n-  useEffect(() => {\n-    setError(false);\n-    setDataLoaded(false);\n-\n-    getPeople()\n-      .then(response => {\n-        setPeople(getPeopleWithParents(response));\n-        setDataLoaded(true);\n-      })\n-      .catch(() => {\n-        setError(true);\n-      });\n-  }, []);\n-\n-  return (\n-    <>\n-      <h1 className=\"title\">People Page</h1>\n-      <div className=\"block\">\n-        <div className=\"box table-container\">\n-          {!dataLoaded && !error && <Loader />}\n-\n-          {error && (\n-            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-              Something went wrong\n-            </p>\n-          )}\n-\n-          {dataLoaded && people.length === 0 && (\n-            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-          )}\n-\n-          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n-        </div>\n-      </div>\n-    </>\n-  );\n-});\n-import React, { useEffect, useState } from 'react';\n-import { Loader } from './Loader/Loader';\n-import { PeopleTable } from './PeopleTable';\n-import { Person } from '../types/Person';\n-import { getPeople } from '../api';\n-import { getPeopleWithParents } from '../Gettery/getPeopleWithParents';\n-\n-export const PeoplePage: React.FC = React.memo(() => {\n-  const [people, setPeople] = useState<Person[]>([]);\n-  const [error, setError] = useState(false);\n-  const [dataLoaded, setDataLoaded] = useState(false);\n-\n-  useEffect(() => {\n-    setError(false);\n-    setDataLoaded(false);\n-\n-    getPeople()\n-      .then(response => {\n-        setPeople(getPeopleWithParents(response));\n-        setDataLoaded(true);\n-      })\n-      .catch(() => {\n-        setError(true);\n-      });\n-  }, []);\n-\n-  return (\n-    <>\n-      <h1 className=\"title\">People Page</h1>\n-      <div className=\"block\">\n-        <div className=\"box table-container\">\n-          {!dataLoaded && !error && <Loader />}\n-\n-          {error && (\n-            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-              Something went wrong\n-            </p>\n-          )}\n-\n-          {dataLoaded && people.length === 0 && (\n-            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-          )}\n-\n-          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n-        </div>\n-      </div>\n-    </>\n-  );\n-});\n-import React, { useEffect, useState } from 'react';\n-import { Loader } from './Loader/Loader';\n-import { PeopleTable } from './';\n-import { Person } from '../types/Person';\n-import { getPeople } from '../api';\n-import { getPeopleWithParents } from '../../services/getPeopleWithParents';\n-\n-export const PeoplePage: React.FC = React.memo(() => {\n-  const [people, setPeople] = useState<Person[]>([]);\n-  const [error, setError] = useState(false);\n-  const [dataLoaded, setDataLoaded] = useState(false);\n-\n-  useEffect(() => {\n-    setError(false);\n-    setDataLoaded(false);\n-\n-    getPeople()\n-      .then(response => {\n-        setPeople(getPeopleWithParents(response));\n-        setDataLoaded(true);\n-      })\n-      .catch(() => {\n-        setError(true);\n-      });\n-  }, []);\n-\n-  return (\n-    <>\n-      <h1 className=\"title\">People Page</h1>\n-      <div className=\"block\">\n-        <div className=\"box table-container\">\n-          {!dataLoaded && !error && <Loader />}\n-\n-          {error && (\n-            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-              Something went wrong\n-            </p>\n-          )}\n-\n-          {dataLoaded && people.length === 0 && (\n-            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-          )}\n-\n-          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n-        </div>\n-      </div>\n-    </>\n-  );\n-});\n-import React, { useEffect, useState } from 'react';\n-import { Loader } from './Loader/Loader';\n-import { PeopleTable } from '../PeopleTable/PeopleTable';\n-import { Person } from '../types/Person';\n-import { getPeople } from '../';\n-import { getPeopleWithParents } from '../../services/getPeopleWithParents';\n-\n-export const PeoplePage: React.FC = React.memo(() => {\n-  const [people, setPeople] = useState<Person[]>([]);\n-  const [error, setError] = useState(false);\n-  const [dataLoaded, setDataLoaded] = useState(false);\n-\n-  useEffect(() => {\n-    setError(false);\n-    setDataLoaded(false);\n-\n-    getPeople()\n-      .then(response => {\n-        setPeople(getPeopleWithParents(response));\n-        setDataLoaded(true);\n-      })\n-      .catch(() => {\n-        setError(true);\n-      });\n-  }, []);\n-\n-  return (\n-    <>\n-      <h1 className=\"title\">People Page</h1>\n-      <div className=\"block\">\n-        <div className=\"box table-container\">\n-          {!dataLoaded && !error && <Loader />}\n-\n-          {error && (\n-            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-              Something went wrong\n-            </p>\n-          )}\n-\n-          {dataLoaded && people.length === 0 && (\n-            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-          )}\n-\n-          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n-        </div>\n-      </div>\n-    </>\n-  );\n-});\n-import React, { useEffect, useState } from 'react';\n-import { Loader } from './Loader/Loader';\n-import { PeopleTable } from '../PeopleTable/PeopleTable';\n-import { Person } from '../types/Person';\n-import { getPeople } from '../../api';\n-import { getPeopleWithParents } from '../../services/getPeopleWithParents';\n-\n-export const PeoplePage: React.FC = React.memo(() => {\n-  const [people, setPeople] = useState<Person[]>([]);\n-  const [error, setError] = useState(false);\n-  const [dataLoaded, setDataLoaded] = useState(false);\n-\n-  useEffect(() => {\n-    setError(false);\n-    setDataLoaded(false);\n-\n-    getPeople()\n-      .then(response => {\n-        setPeople(getPeopleWithParents(response));\n-        setDataLoaded(true);\n-      })\n-      .catch(() => {\n-        setError(true);\n-      });\n-  }, []);\n-\n-  return (\n-    <>\n-      <h1 className=\"title\">People Page</h1>\n-      <div className=\"block\">\n-        <div className=\"box table-container\">\n-          {!dataLoaded && !error && <Loader />}\n-\n-          {error && (\n-            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-              Something went wrong\n-            </p>\n-          )}\n-\n-          {dataLoaded && people.length === 0 && (\n-            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-          )}\n-\n-          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n-        </div>\n-      </div>\n-    </>\n-  );\n-});\n-import React, { useEffect, useState } from 'react';\n-import { Loader } from './Loader/Loader';\n-import { PeopleTable } from '../PeopleTable/PeopleTable';\n-import { Person } from '.././';\n-import { getPeople } from '../../api';\n-import { getPeopleWithParents } from '../../services/getPeopleWithParents';\n-\n-export const PeoplePage: React.FC = React.memo(() => {\n-  const [people, setPeople] = useState<Person[]>([]);\n-  const [error, setError] = useState(false);\n-  const [dataLoaded, setDataLoaded] = useState(false);\n-\n-  useEffect(() => {\n-    setError(false);\n-    setDataLoaded(false);\n-\n-    getPeople()\n-      .then(response => {\n-        setPeople(getPeopleWithParents(response));\n-        setDataLoaded(true);\n-      })\n-      .catch(() => {\n-        setError(true);\n-      });\n-  }, []);\n-\n-  return (\n-    <>\n-      <h1 className=\"title\">People Page</h1>\n-      <div className=\"block\">\n-        <div className=\"box table-container\">\n-          {!dataLoaded && !error && <Loader />}\n-\n-          {error && (\n-            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-              Something went wrong\n-            </p>\n-          )}\n-\n-          {dataLoaded && people.length === 0 && (\n-            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-          )}\n-\n-          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n-        </div>\n-      </div>\n-    </>\n-  );\n-});\n-import React, { useEffect, useState } from 'react';\n-import { Loader } from './Loader/Loader';\n-import { PeopleTable } from '../PeopleTable/PeopleTable';\n-import { Person } from './';\n-import { getPeople } from '../../api';\n-import { getPeopleWithParents } from '../../services/getPeopleWithParents';\n-\n-export const PeoplePage: React.FC = React.memo(() => {\n-  const [people, setPeople] = useState<Person[]>([]);\n-  const [error, setError] = useState(false);\n-  const [dataLoaded, setDataLoaded] = useState(false);\n-\n-  useEffect(() => {\n-    setError(false);\n-    setDataLoaded(false);\n-\n-    getPeople()\n-      .then(response => {\n-        setPeople(getPeopleWithParents(response));\n-        setDataLoaded(true);\n-      })\n-      .catch(() => {\n-        setError(true);\n-      });\n-  }, []);\n-\n-  return (\n-    <>\n-      <h1 className=\"title\">People Page</h1>\n-      <div className=\"block\">\n-        <div className=\"box table-container\">\n-          {!dataLoaded && !error && <Loader />}\n-\n-          {error && (\n-            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-              Something went wrong\n-            </p>\n-          )}\n-\n-          {dataLoaded && people.length === 0 && (\n-            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-          )}\n-\n-          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n-        </div>\n-      </div>\n-    </>\n-  );\n-});\n-import React, { useEffect, useState } from 'react';\n-import { Loader } from './Loader/Loader';\n-import { PeopleTable } from '../PeopleTable/PeopleTable';\n-import { Person } from '../../types';\n-import { getPeople } from '../../api';\n-import { getPeopleWithParents } from '../../services/getPeopleWithParents';\n-\n-export const PeoplePage: React.FC = React.memo(() => {\n-  const [people, setPeople] = useState<Person[]>([]);\n-  const [error, setError] = useState(false);\n-  const [dataLoaded, setDataLoaded] = useState(false);\n-\n-  useEffect(() => {\n-    setError(false);\n-    setDataLoaded(false);\n-\n-    getPeople()\n-      .then(response => {\n-        setPeople(getPeopleWithParents(response));\n-        setDataLoaded(true);\n-      })\n-      .catch(() => {\n-        setError(true);\n-      });\n-  }, []);\n-\n-  return (\n-    <>\n-      <h1 className=\"title\">People Page</h1>\n-      <div className=\"block\">\n-        <div className=\"box table-container\">\n-          {!dataLoaded && !error && <Loader />}\n-\n-          {error && (\n-            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-              Something went wrong\n-            </p>\n-          )}\n-\n-          {dataLoaded && people.length === 0 && (\n-            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-          )}\n-\n-          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n-        </div>\n-      </div>\n-    </>\n-  );\n-});\n"
                },
                {
                    "date": 1715939379882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { Person } from '../types/Person';\n import { getPeople } from '../api';\n import { getPeopleWithParents } from '../Gettery/getPeopleWithParen';\n \n-export const PeoplePage: React.FC = React.memo(() => {\n+const PeoplePage: React.FC = React.memo(() => {\n   const [people, setPeople] = useState<Person[]>([]);\n   const [error, setError] = useState(false);\n   const [dataLoaded, setDataLoaded] = useState(false);\n \n"
                },
                {
                    "date": 1715939386409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+/* eslint-disable react/display-name */\n+import React, { useEffect, useState } from 'react';\n+import { Loader } from './Loader/Loader';\n+import { PeopleTable } from './PeopleTable';\n+import { Person } from '../types/Person';\n+import { getPeople } from '../api';\n+import { getPeopleWithParents } from '../Gettery/getPeopleWithParen';\n+\n+const PeoplePage: React.FC = React.memo(() => {\n+  const [people, setPeople] = useState<Person[]>([]);\n+  const [error, setError] = useState(false);\n+  const [dataLoaded, setDataLoaded] = useState(false);\n+\n+  useEffect(() => {\n+    setError(false);\n+    setDataLoaded(false);\n+\n+    getPeople()\n+      .then(response => {\n+        setPeople(getPeopleWithParents(response));\n+        setDataLoaded(true);\n+      })\n+      .catch(() => {\n+        setError(true);\n+      });\n+  }, []);\n+\n+  return (\n+    <>\n+      <h1 className=\"title\">People Page</h1>\n+      <div className=\"block\">\n+        <div className=\"box table-container\">\n+          {!dataLoaded && !error && <Loader />}\n+\n+          {error && (\n+            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+              Something went wrong\n+            </p>\n+          )}\n+\n+          {dataLoaded && people.length === 0 && (\n+            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+          )}\n+\n+          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n+        </div>\n+      </div>\n+    </>\n+  );\n+});\n+\n+export \n"
                },
                {
                    "date": 1715939393845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+/* eslint-disable react/display-name */\n+import React, { useEffect, useState } from 'react';\n+import { Loader } from './Loader/Loader';\n+import { PeopleTable } from './PeopleTable';\n+import { Person } from '../types/Person';\n+import { getPeople } from '../api';\n+import { getPeopleWithParents } from '../Gettery/getPeopleWithParen';\n+\n+const PeoplePage: React.FC = React.memo(() => {\n+  const [people, setPeople] = useState<Person[]>([]);\n+  const [error, setError] = useState(false);\n+  const [dataLoaded, setDataLoaded] = useState(false);\n+\n+  useEffect(() => {\n+    setError(false);\n+    setDataLoaded(false);\n+\n+    getPeople()\n+      .then(response => {\n+        setPeople(getPeopleWithParents(response));\n+        setDataLoaded(true);\n+      })\n+      .catch(() => {\n+        setError(true);\n+      });\n+  }, []);\n+\n+  return (\n+    <>\n+      <h1 className=\"title\">People Page</h1>\n+      <div className=\"block\">\n+        <div className=\"box table-container\">\n+          {!dataLoaded && !error && <Loader />}\n+\n+          {error && (\n+            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+              Something went wrong\n+            </p>\n+          )}\n+\n+          {dataLoaded && people.length === 0 && (\n+            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+          )}\n+\n+          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n+        </div>\n+      </div>\n+    </>\n+  );\n+});\n+\n+export deafult PeoplePage;\n"
                },
                {
                    "date": 1715939401771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,5 +48,5 @@\n     </>\n   );\n });\n \n-export deafult PeoplePage;\n+export deafault PeoplePage;\n"
                },
                {
                    "date": 1715939513016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+/* eslint-disable react/display-name */\n+import React, { useEffect, useState } from 'react';\n+import { Loader } from './Loader/Loader';\n+import { PeopleTable from './PeopleTable';\n+import { Person } from '../types/Person';\n+import { getPeople } from '../api';\n+import { getPeopleWithParents } from '../Gettery/getPeopleWithParen';\n+\n+const PeoplePage: React.FC = React.memo(() => {\n+  const [people, setPeople] = useState<Person[]>([]);\n+  const [error, setError] = useState(false);\n+  const [dataLoaded, setDataLoaded] = useState(false);\n+\n+  useEffect(() => {\n+    setError(false);\n+    setDataLoaded(false);\n+\n+    getPeople()\n+      .then(response => {\n+        setPeople(getPeopleWithParents(response));\n+        setDataLoaded(true);\n+      })\n+      .catch(() => {\n+        setError(true);\n+      });\n+  }, []);\n+\n+  return (\n+    <>\n+      <h1 className=\"title\">People Page</h1>\n+      <div className=\"block\">\n+        <div className=\"box table-container\">\n+          {!dataLoaded && !error && <Loader />}\n+\n+          {error && (\n+            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+              Something went wrong\n+            </p>\n+          )}\n+\n+          {dataLoaded && people.length === 0 && (\n+            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+          )}\n+\n+          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n+        </div>\n+      </div>\n+    </>\n+  );\n+});\n+\n+export default PeoplePage;\n"
                },
                {
                    "date": 1715940143798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,206 +1,74 @@\n-/* eslint-disable react/display-name */\n-import React, { useEffect, useState } from 'react';\n-import { Loader } from './Loader/Loader';\n-import { PeopleTable from './PeopleTable';\n-import { Person } from '../types/Person';\n+import { useEffect, useState } from 'react';\n+import { Loader } from './Loader';\n import { getPeople } from '../api';\n-import { getPeopleWithParents } from '../Gettery/getPeopleWithParen';\n+import { Person } from '../types';\n+import { PersonItem } from './PersonItem';\n+import React from 'react';\n \n-const PeoplePage: React.FC = React.memo(() => {\n-  const [people, setPeople] = useState<Person[]>([]);\n-  const [error, setError] = useState(false);\n-  const [dataLoaded, setDataLoaded] = useState(false);\n+const preparePeople = (people: Person[]) =>\n+  people.map(person => ({\n+    ...person,\n+    mother: people.find(p => p.name === person.motherName),\n+    father: people.find(p => p.name === person.fatherName),\n+  }));\n \n-  useEffect(() => {\n-    setError(false);\n-    setDataLoaded(false);\n-\n-    getPeople()\n-      .then(response => {\n-        setPeople(getPeopleWithParents(response));\n-        setDataLoaded(true);\n-      })\n-      .catch(() => {\n-        setError(true);\n-      });\n-  }, []);\n-\n-  return (\n-    <>\n-      <h1 className=\"title\">People Page</h1>\n-      <div className=\"block\">\n-        <div className=\"box table-container\">\n-          {!dataLoaded && !error && <Loader />}\n-\n-          {error && (\n-            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-              Something went wrong\n-            </p>\n-          )}\n-\n-          {dataLoaded && people.length === 0 && (\n-            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-          )}\n-\n-          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n-        </div>\n-      </div>\n-    </>\n-  );\n-});\n-\n-export default PeoplePage;\n-/* eslint-disable react/display-name */\n-import React, { useEffect, useState } from 'react';\n-import { Loader } from './Loader/Loader';\n-import { PeopleTable } from './PeopleTable';\n-import { Person } from '../types/Person';\n-import { getPeople } from '../api';\n-import { getPeopleWithParents } from '../Gettery/getPeopleWithParen';\n-\n-const PeoplePage: React.FC = React.memo(() => {\n+export const People = () => {\n   const [people, setPeople] = useState<Person[]>([]);\n-  const [error, setError] = useState(false);\n-  const [dataLoaded, setDataLoaded] = useState(false);\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [hasError, setHasError] = useState(false);\n \n   useEffect(() => {\n-    setError(false);\n-    setDataLoaded(false);\n+    setIsLoading(true);\n+    setHasError(false);\n \n     getPeople()\n-      .then(response => {\n-        setPeople(getPeopleWithParents(response));\n-        setDataLoaded(true);\n-      })\n-      .catch(() => {\n-        setError(true);\n-      });\n-  }, []);\n+      .then(peopleFromServer => {\n+        const preparedPeople = preparePeople(peopleFromServer);\n \n-  return (\n-    <>\n-      <h1 className=\"title\">People Page</h1>\n-      <div className=\"block\">\n-        <div className=\"box table-container\">\n-          {!dataLoaded && !error && <Loader />}\n-\n-          {error && (\n-            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-              Something went wrong\n-            </p>\n-          )}\n-\n-          {dataLoaded && people.length === 0 && (\n-            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-          )}\n-\n-          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n-        </div>\n-      </div>\n-    </>\n-  );\n-});\n-\n-export deafault PeoplePage;\n-/* eslint-disable react/display-name */\n-import React, { useEffect, useState } from 'react';\n-import { Loader } from './Loader/Loader';\n-import { PeopleTable } from './PeopleTable';\n-import { Person } from '../types/Person';\n-import { getPeople } from '../api';\n-import { getPeopleWithParents } from '../Gettery/getPeopleWithParen';\n-\n-const PeoplePage: React.FC = React.memo(() => {\n-  const [people, setPeople] = useState<Person[]>([]);\n-  const [error, setError] = useState(false);\n-  const [dataLoaded, setDataLoaded] = useState(false);\n-\n-  useEffect(() => {\n-    setError(false);\n-    setDataLoaded(false);\n-\n-    getPeople()\n-      .then(response => {\n-        setPeople(getPeopleWithParents(response));\n-        setDataLoaded(true);\n+        setPeople(preparedPeople);\n       })\n-      .catch(() => {\n-        setError(true);\n-      });\n+      .catch(() => setHasError(true))\n+      .finally(() => setIsLoading(false));\n   }, []);\n \n   return (\n     <>\n       <h1 className=\"title\">People Page</h1>\n       <div className=\"block\">\n         <div className=\"box table-container\">\n-          {!dataLoaded && !error && <Loader />}\n+          {(isLoading && <Loader />) ||\n+            (hasError && (\n+              <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+                Something went wrong\n+              </p>\n+            )) ||\n+            (!people.length ? (\n+              <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+            ) : (\n+              <table\n+                data-cy=\"peopleTable\"\n+                className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n+              >\n+                <thead>\n+                  <tr>\n+                    <th>Name</th>\n+                    <th>Sex</th>\n+                    <th>Born</th>\n+                    <th>Died</th>\n+                    <th>Mother</th>\n+                    <th>Father</th>\n+                  </tr>\n+                </thead>\n \n-          {error && (\n-            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-              Something went wrong\n-            </p>\n-          )}\n-\n-          {dataLoaded && people.length === 0 && (\n-            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-          )}\n-\n-          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n+                <tbody>\n+                  {people.map(person => (\n+                    <PersonItem key={person.slug} person={person} />\n+                  ))}\n+                </tbody>\n+              </table>\n+            ))}\n         </div>\n       </div>\n     </>\n   );\n-});\n-\n-export \n-/* eslint-disable react/display-name */\n-import React, { useEffect, useState } from 'react';\n-import { Loader } from './Loader/Loader';\n-import { PeopleTable } from './PeopleTable';\n-import { Person } from '../types/Person';\n-import { getPeople } from '../api';\n-import { getPeopleWithParents } from '../Gettery/getPeopleWithParen';\n-\n-const PeoplePage: React.FC = React.memo(() => {\n-  const [people, setPeople] = useState<Person[]>([]);\n-  const [error, setError] = useState(false);\n-  const [dataLoaded, setDataLoaded] = useState(false);\n-\n-  useEffect(() => {\n-    setError(false);\n-    setDataLoaded(false);\n-\n-    getPeople()\n-      .then(response => {\n-        setPeople(getPeopleWithParents(response));\n-        setDataLoaded(true);\n-      })\n-      .catch(() => {\n-        setError(true);\n-      });\n-  }, []);\n-\n-  return (\n-    <>\n-      <h1 className=\"title\">People Page</h1>\n-      <div className=\"block\">\n-        <div className=\"box table-container\">\n-          {!dataLoaded && !error && <Loader />}\n-\n-          {error && (\n-            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-              Something went wrong\n-            </p>\n-          )}\n-\n-          {dataLoaded && people.length === 0 && (\n-            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-          )}\n-\n-          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n-        </div>\n-      </div>\n-    </>\n-  );\n-});\n+};\n"
                },
                {
                    "date": 1715942849257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { useEffect, useState } from 'react';\n import { Loader } from './Loader';\n import { getPeople } from '../api';\n import { Person } from '../types';\n-import { PersonItem } from './PersonItem';\n+import { PersonItem } from './PeopleItem';\n import React from 'react';\n \n const preparePeople = (people: Person[]) =>\n   people.map(person => ({\n"
                },
                {
                    "date": 1719383147797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,39 +35,24 @@\n     <>\n       <h1 className=\"title\">People Page</h1>\n       <div className=\"block\">\n         <div className=\"box table-container\">\n-          {(isLoading && <Loader />) ||\n-            (hasError && (\n-              <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-                Something went wrong\n-              </p>\n-            )) ||\n-            (!people.length ? (\n-              <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-            ) : (\n-              <table\n-                data-cy=\"peopleTable\"\n-                className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n-              >\n-                <thead>\n-                  <tr>\n-                    <th>Name</th>\n-                    <th>Sex</th>\n-                    <th>Born</th>\n-                    <th>Died</th>\n-                    <th>Mother</th>\n-                    <th>Father</th>\n-                  </tr>\n-                </thead>\n-\n-                <tbody>\n-                  {people.map(person => (\n-                    <PersonItem key={person.slug} person={person} />\n-                  ))}\n-                </tbody>\n-              </table>\n-            ))}\n+        {isLoading ? (\n+  <Loader />\n+) : hasError ? (\n+  <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+    Something went wrong\n+  </p>\n+) : !people.length ? (\n+  <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+) : (\n+  <table\n+    data-cy=\"peopleTable\"\n+    className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n+  >\n+    {/* Table content goes here */}\n+  </table>\n+)}\n         </div>\n       </div>\n     </>\n   );\n"
                },
                {
                    "date": 1719383171378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,24 +35,39 @@\n     <>\n       <h1 className=\"title\">People Page</h1>\n       <div className=\"block\">\n         <div className=\"box table-container\">\n-        {isLoading ? (\n-  <Loader />\n-) : hasError ? (\n-  <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-    Something went wrong\n-  </p>\n-) : !people.length ? (\n-  <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-) : (\n-  <table\n-    data-cy=\"peopleTable\"\n-    className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n-  >\n-    {/* Table content goes here */}\n-  </table>\n-)}\n+          {(isLoading && <Loader />) ||\n+            (hasError && (\n+              <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+                Something went wrong\n+              </p>\n+            )) ||\n+            (!people.length ? (\n+              <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+            ) : (\n+              <table\n+                data-cy=\"peopleTable\"\n+                className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n+              >\n+                <thead>\n+                  <tr>\n+                    <th>Name</th>\n+                    <th>Sex</th>\n+                    <th>Born</th>\n+                    <th>Died</th>\n+                    <th>Mother</th>\n+                    <th>Father</th>\n+                  </tr>\n+                </thead>\n+\n+                <tbody>\n+                  {people.map(person => (\n+                    <PersonItem key={person.slug} person={person} />\n+                  ))}\n+                </tbody>\n+              </table>\n+            ))}\n         </div>\n       </div>\n     </>\n   );\n"
                },
                {
                    "date": 1719383279681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,39 +35,24 @@\n     <>\n       <h1 className=\"title\">People Page</h1>\n       <div className=\"block\">\n         <div className=\"box table-container\">\n-          {(isLoading && <Loader />) ||\n-            (hasError && (\n-              <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-                Something went wrong\n-              </p>\n-            )) ||\n-            (!people.length ? (\n-              <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n-            ) : (\n-              <table\n-                data-cy=\"peopleTable\"\n-                className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n-              >\n-                <thead>\n-                  <tr>\n-                    <th>Name</th>\n-                    <th>Sex</th>\n-                    <th>Born</th>\n-                    <th>Died</th>\n-                    <th>Mother</th>\n-                    <th>Father</th>\n-                  </tr>\n-                </thead>\n-\n-                <tbody>\n-                  {people.map(person => (\n-                    <PersonItem key={person.slug} person={person} />\n-                  ))}\n-                </tbody>\n-              </table>\n-            ))}\n+        {isLoading ? (\n+  <Loader />\n+) : hasError ? (\n+  <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+    Something went wrong\n+  </p>\n+) : !people.length ? (\n+  <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+) : (\n+  <table\n+    data-cy=\"peopleTable\"\n+    className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n+  >\n+    {/* Table content goes here */}\n+  </table>\n+)}\n         </div>\n       </div>\n     </>\n   );\n"
                },
                {
                    "date": 1719383287937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+import { useEffect, useState } from 'react';\n+import { Loader } from './Loader';\n+import { getPeople } from '../api';\n+import { Person } from '../types';\n+import { PersonItem } from './PeopleItem';\n+import React from 'react';\n+\n+const preparePeople = (people: Person[]) =>\n+  people.map(person => ({\n+    ...person,\n+    mother: people.find(p => p.name === person.motherName),\n+    father: people.find(p => p.name === person.fatherName),\n+  }));\n+\n+export const People = () => {\n+  const [people, setPeople] = useState<Person[]>([]);\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [hasError, setHasError] = useState(false);\n+\n+  useEffect(() => {\n+    setIsLoading(true);\n+    setHasError(false);\n+\n+    getPeople()\n+      .then(peopleFromServer => {\n+        const preparedPeople = preparePeople(peopleFromServer);\n+\n+        setPeople(preparedPeople);\n+      })\n+      .catch(() => setHasError(true))\n+      .finally(() => setIsLoading(false));\n+  }, []);\n+\n+  return (\n+    <>\n+      <h1 className=\"title\">People Page</h1>\n+      <div className=\"block\">\n+        <div className=\"box table-container\">\n+        {isLoading ? (\n+  <Loader />\n+) : hasError ? (\n+  <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n+    Something went wrong\n+  </p>\n+) : !people.length ? (\n+  <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+) : (\n+  <table\n+    data-cy=\"peopleTable\"\n+    className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n+  >\n+                    <thead>\n+                  <tr>\n+                    <th>Name</th>\n+                    <th>Sex</th>\n+                    <th>Born</th>\n+                    <th>Died</th>\n+                    <th>Mother</th>\n+                    <th>Father</th>\n+                  </tr>\n+                </thead>\n+\n+                <tbody>\n+                  {people.map(person => (\n+                    <PersonItem key={person.slug} person={person} />\n+                  ))}\n+                </tbody>\n+  </table>\n+)}\n+        </div>\n+      </div>\n+    </>\n+  );\n+};\n"
                }
            ],
            "date": 1715938516358,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { PeopleTable } from '../PeopleTable/PeopleTable';\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\nimport { getPeopleWithParents } from '../../services/getPeopleWithParents';\n\nexport const PeoplePage: React.FC = React.memo(() => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [error, setError] = useState(false);\n  const [dataLoaded, setDataLoaded] = useState(false);\n\n  useEffect(() => {\n    setError(false);\n    setDataLoaded(false);\n\n    getPeople()\n      .then(response => {\n        setPeople(getPeopleWithParents(response));\n        setDataLoaded(true);\n      })\n      .catch(() => {\n        setError(true);\n      });\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {!dataLoaded && !error && <Loader />}\n\n          {error && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {dataLoaded && people.length === 0 && (\n            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n          )}\n\n          {dataLoaded && people.length > 0 && <PeopleTable people={people} />}\n        </div>\n      </div>\n    </>\n  );\n});\n"
        }
    ]
}