{
    "sourceFile": "src/App.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1715766020363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715766063371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,167 +1,127 @@\n+import React, { useState, useEffect } from 'react';\n+import { HashRouter, Routes, Route, Navigate } from 'react-router-dom';\n import { Loader } from './components/Loader';\n-\n import './App.scss';\n \n-export const App = () => (\n-  <div data-cy=\"app\">\n-    <nav\n-      data-cy=\"nav\"\n-      className=\"navbar is-fixed-top has-shadow\"\n-      role=\"navigation\"\n-      aria-label=\"main navigation\"\n-    >\n+const Navbar = () => {\n+  return (\n+    <nav className=\"navbar is-fixed-top has-shadow\" role=\"navigation\" aria-label=\"main navigation\">\n       <div className=\"container\">\n         <div className=\"navbar-brand\">\n           <a className=\"navbar-item\" href=\"#/\">\n             Home\n           </a>\n-\n-          <a\n-            className=\"navbar-item has-background-grey-lighter\"\n-            href=\"#/people\"\n-          >\n+          <a className=\"navbar-item has-background-grey-lighter\" href=\"#/people\">\n             People\n           </a>\n         </div>\n       </div>\n     </nav>\n+  );\n+};\n \n-    <main className=\"section\">\n-      <div className=\"container\">\n-        <h1 className=\"title\">Home Page</h1>\n-        <h1 className=\"title\">People Page</h1>\n-        <h1 className=\"title\">Page not found</h1>\n+const HomePage = () => <h1 className=\"title\">Home Page</h1>;\n \n-        <div className=\"block\">\n-          <div className=\"box table-container\">\n-            <Loader />\n+const PeoplePage = () => {\n+  const [people, setPeople] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(null);\n \n-            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n-              Something went wrong\n-            </p>\n+  useEffect(() => {\n+    const fetchData = async () => {\n+      try {\n+        const response = await fetch('https://mate-academy.github.io/react_people-table/api/people.json');\n+        if (!response.ok) {\n+          throw new Error('Failed to fetch data');\n+        }\n+        const data = await response.json();\n+        setPeople(data);\n+        setLoading(false);\n+      } catch (error) {\n+        setError(error.message);\n+        setLoading(false);\n+      }\n+    };\n \n-            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n+    fetchData();\n+  }, []);\n \n-            <table\n-              data-cy=\"peopleTable\"\n-              className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n-            >\n-              <thead>\n-                <tr>\n-                  <th>Name</th>\n-                  <th>Sex</th>\n-                  <th>Born</th>\n-                  <th>Died</th>\n-                  <th>Mother</th>\n-                  <th>Father</th>\n-                </tr>\n-              </thead>\n+  return (\n+    <div className=\"container\">\n+      <h1 className=\"title\">People Page</h1>\n+      {loading ? (\n+        <Loader />\n+      ) : error ? (\n+        <p className=\"has-text-danger\">{error}</p>\n+      ) : (\n+        <PeopleTable people={people} />\n+      )}\n+    </div>\n+  );\n+};\n \n-              <tbody>\n-                <tr data-cy=\"person\">\n-                  <td>\n-                    <a href=\"#/people/jan-van-brussel-1714\">Jan van Brussel</a>\n-                  </td>\n+const NotFoundPage = () => <h1 className=\"title\">Page not found</h1>;\n \n-                  <td>m</td>\n-                  <td>1714</td>\n-                  <td>1748</td>\n-                  <td>Joanna van Rooten</td>\n-                  <td>Jacobus van Brussel</td>\n-                </tr>\n+const PersonLink = ({ person, people }) => {\n+  const foundPerson = people.find(p => p.name === person);\n \n-                <tr data-cy=\"person\">\n-                  <td>\n-                    <a href=\"#/people/philibert-haverbeke-1907\">\n-                      Philibert Haverbeke\n-                    </a>\n-                  </td>\n+  if (foundPerson) {\n+    const url = `#/people/${foundPerson.slug}`;\n+    return <a href={url} className={foundPerson.sex === 'f' ? 'has-text-danger' : ''}>{person}</a>;\n+  } else {\n+    return <span>{person}</span>;\n+  }\n+};\n \n-                  <td>m</td>\n-                  <td>1907</td>\n-                  <td>1997</td>\n+const PeopleTable = ({ people }) => {\n+  const [selectedPerson, setSelectedPerson] = useState(null);\n \n-                  <td>\n-                    <a\n-                      className=\"has-text-danger\"\n-                      href=\"#/people/emma-de-milliano-1876\"\n-                    >\n-                      Emma de Milliano\n-                    </a>\n-                  </td>\n+  return (\n+    <table className=\"table is-striped is-hoverable is-narrow is-fullwidth\">\n+      <thead>\n+        <tr>\n+          <th>Name</th>\n+          <th>Sex</th>\n+          <th>Born</th>\n+          <th>Died</th>\n+          <th>Mother</th>\n+          <th>Father</th>\n+        </tr>\n+      </thead>\n+      <tbody>\n+        {people.map(person => (\n+          <tr key={person.slug} className={selectedPerson === person.slug ? 'has-background-warning' : ''}>\n+            <td>\n+              <PersonLink person={person.name} people={people} />\n+            </td>\n+            <td>{person.sex}</td>\n+            <td>{person.born}</td>\n+            <td>{person.died}</td>\n+            <td>\n+              <PersonLink person={person.motherName} people={people} />\n+            </td>\n+            <td>\n+              <PersonLink person={person.fatherName} people={people} />\n+            </td>\n+          </tr>\n+        ))}\n+      </tbody>\n+    </table>\n+  );\n+};\n \n-                  <td>\n-                    <a href=\"#/people/emile-haverbeke-1877\">Emile Haverbeke</a>\n-                  </td>\n-                </tr>\n-\n-                <tr data-cy=\"person\" className=\"has-background-warning\">\n-                  <td>\n-                    <a href=\"#/people/jan-frans-van-brussel-1761\">\n-                      Jan Frans van Brussel\n-                    </a>\n-                  </td>\n-\n-                  <td>m</td>\n-                  <td>1761</td>\n-                  <td>1833</td>\n-                  <td>-</td>\n-\n-                  <td>\n-                    <a href=\"#/people/jacobus-bernardus-van-brussel-1736\">\n-                      Jacobus Bernardus van Brussel\n-                    </a>\n-                  </td>\n-                </tr>\n-\n-                <tr data-cy=\"person\">\n-                  <td>\n-                    <a\n-                      className=\"has-text-danger\"\n-                      href=\"#/people/lievijne-jans-1542\"\n-                    >\n-                      Lievijne Jans\n-                    </a>\n-                  </td>\n-\n-                  <td>f</td>\n-                  <td>1542</td>\n-                  <td>1582</td>\n-                  <td>-</td>\n-                  <td>-</td>\n-                </tr>\n-\n-                <tr data-cy=\"person\">\n-                  <td>\n-                    <a href=\"#/people/bernardus-de-causmaecker-1721\">\n-                      Bernardus de Causmaecker\n-                    </a>\n-                  </td>\n-\n-                  <td>m</td>\n-                  <td>1721</td>\n-                  <td>1789</td>\n-\n-                  <td>\n-                    <a\n-                      className=\"has-text-danger\"\n-                      href=\"#/people/livina-haverbeke-1692\"\n-                    >\n-                      Livina Haverbeke\n-                    </a>\n-                  </td>\n-\n-                  <td>\n-                    <a href=\"#/people/lieven-de-causmaecker-1696\">\n-                      Lieven de Causmaecker\n-                    </a>\n-                  </td>\n-                </tr>\n-              </tbody>\n-            </table>\n-          </div>\n-        </div>\n-      </div>\n-    </main>\n+const App = () => (\n+  <div data-cy=\"app\">\n+    <HashRouter>\n+      <Navbar />\n+      <Routes>\n+        <Route path=\"/\" element={<Navigate to=\"/home\" replace />} />\n+        <Route path=\"/home\" element={<HomePage />} />\n+        <Route path=\"/people\" element={<PeoplePage />} />\n+        <Route path=\"*\" element={<NotFoundPage />} />\n+      </Routes>\n+    </HashRouter>\n   </div>\n );\n+\n+export default App;\n"
                },
                {
                    "date": 1715766326309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+import React, { useState, useEffect } from 'react';\n+import { HashRouter, Routes, Route, Navigate } from 'react-router-dom';\n+import { Loader } from './components/Loader';\n+import './App.scss';\n+\n+export const Navbar = () => {\n+  return (\n+    <nav className=\"navbar is-fixed-top has-shadow\" role=\"navigation\" aria-label=\"main navigation\">\n+      <div className=\"container\">\n+        <div className=\"navbar-brand\">\n+          <a className=\"navbar-item\" href=\"#/\">\n+            Home\n+          </a>\n+          <a className=\"navbar-item has-background-grey-lighter\" href=\"#/people\">\n+            People\n+          </a>\n+        </div>\n+      </div>\n+    </nav>\n+  );\n+};\n+\n+const HomePage = () => <h1 className=\"title\">Home Page</h1>;\n+\n+const PeoplePage = () => {\n+  const [people, setPeople] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    const fetchData = async () => {\n+      try {\n+        const response = await fetch('https://mate-academy.github.io/react_people-table/api/people.json');\n+        if (!response.ok) {\n+          throw new Error('Failed to fetch data');\n+        }\n+        const data = await response.json();\n+        setPeople(data);\n+        setLoading(false);\n+      } catch (error) {\n+        setError(error.message);\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchData();\n+  }, []);\n+\n+  return (\n+    <div className=\"container\">\n+      <h1 className=\"title\">People Page</h1>\n+      {loading ? (\n+        <Loader />\n+      ) : error ? (\n+        <p className=\"has-text-danger\">{error}</p>\n+      ) : (\n+        <PeopleTable people={people} />\n+      )}\n+    </div>\n+  );\n+};\n+\n+const NotFoundPage = () => <h1 className=\"title\">Page not found</h1>;\n+\n+const PersonLink = ({ person, people }) => {\n+  const foundPerson = people.find(p => p.name === person);\n+\n+  if (foundPerson) {\n+    const url = `#/people/${foundPerson.slug}`;\n+    return <a href={url} className={foundPerson.sex === 'f' ? 'has-text-danger' : ''}>{person}</a>;\n+  } else {\n+    return <span>{person}</span>;\n+  }\n+};\n+\n+const PeopleTable = ({ people }) => {\n+  const [selectedPerson, setSelectedPerson] = useState(null);\n+\n+  return (\n+    <table className=\"table is-striped is-hoverable is-narrow is-fullwidth\">\n+      <thead>\n+        <tr>\n+          <th>Name</th>\n+          <th>Sex</th>\n+          <th>Born</th>\n+          <th>Died</th>\n+          <th>Mother</th>\n+          <th>Father</th>\n+        </tr>\n+      </thead>\n+      <tbody>\n+        {people.map(person => (\n+          <tr key={person.slug} className={selectedPerson === person.slug ? 'has-background-warning' : ''}>\n+            <td>\n+              <PersonLink person={person.name} people={people} />\n+            </td>\n+            <td>{person.sex}</td>\n+            <td>{person.born}</td>\n+            <td>{person.died}</td>\n+            <td>\n+              <PersonLink person={person.motherName} people={people} />\n+            </td>\n+            <td>\n+              <PersonLink person={person.fatherName} people={people} />\n+            </td>\n+          </tr>\n+        ))}\n+      </tbody>\n+    </table>\n+  );\n+};\n+\n+const App = () => (\n+  <div data-cy=\"app\">\n+    <HashRouter>\n+      <Navbar />\n+      <Routes>\n+        <Route path=\"/\" element={<Navigate to=\"/home\" replace />} />\n+        <Route path=\"/home\" element={<HomePage />} />\n+        <Route path=\"/people\" element={<PeoplePage />} />\n+        <Route path=\"*\" element={<NotFoundPage />} />\n+      </Routes>\n+    </HashRouter>\n+  </div>\n+);\n+\n+export default App;\n"
                },
                {
                    "date": 1715766332106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,125 @@\n+import React, { useState, useEffect } from 'react';\n+import { HashRouter, Routes, Route, Navigate } from 'react-router-dom';\n+import { Loader } from './components/Loader';\n+import './App.scss';\n+\n+export const Navbar = () => {\n+  return (\n+    <nav className=\"navbar is-fixed-top has-shadow\" role=\"navigation\" aria-label=\"main navigation\">\n+      <div className=\"container\">\n+        <div className=\"navbar-brand\">\n+          <a className=\"navbar-item\" href=\"#/\">\n+            Home\n+          </a>\n+          <a className=\"navbar-item has-background-grey-lighter\" href=\"#/people\">\n+            People\n+          </a>\n+        </div>\n+      </div>\n+    </nav>\n+  );\n+};\n+\n+const HomePage = () => <h1 className=\"title\">Home Page</h1>;\n+\n+const PeoplePage = () => {\n+  const [people, setPeople] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    const fetchData = async () => {\n+      try {\n+        const response = await fetch('https://mate-academy.github.io/react_people-table/api/people.json');\n+        if (!response.ok) {\n+          throw new Error('Failed to fetch data');\n+        }\n+        const data = await response.json();\n+        setPeople(data);\n+        setLoading(false);\n+      } catch (error) {\n+        setError(error.message);\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchData();\n+  }, []);\n+\n+  return (\n+    <div className=\"container\">\n+      <h1 className=\"title\">People Page</h1>\n+      {loading ? (\n+        <Loader />\n+      ) : error ? (\n+        <p className=\"has-text-danger\">{error}</p>\n+      ) : (\n+        <PeopleTable people={people} />\n+      )}\n+    </div>\n+  );\n+};\n+\n+const NotFoundPage = () => <h1 className=\"title\">Page not found</h1>;\n+\n+const PersonLink = ({ person, people }) => {\n+  const foundPerson = people.find(p => p.name === person);\n+\n+  if (foundPerson) {\n+    const url = `#/people/${foundPerson.slug}`;\n+    return <a href={url} className={foundPerson.sex === 'f' ? 'has-text-danger' : ''}>{person}</a>;\n+  } else {\n+    return <span>{person}</span>;\n+  }\n+};\n+\n+const PeopleTable = ({ people }) => {\n+  const [selectedPerson, setSelectedPerson] = useState(null);\n+\n+  return (\n+    <table className=\"table is-striped is-hoverable is-narrow is-fullwidth\">\n+      <thead>\n+        <tr>\n+          <th>Name</th>\n+          <th>Sex</th>\n+          <th>Born</th>\n+          <th>Died</th>\n+          <th>Mother</th>\n+          <th>Father</th>\n+        </tr>\n+      </thead>\n+      <tbody>\n+        {people.map(person => (\n+          <tr key={person.slug} className={selectedPerson === person.slug ? 'has-background-warning' : ''}>\n+            <td>\n+              <PersonLink person={person.name} people={people} />\n+            </td>\n+            <td>{person.sex}</td>\n+            <td>{person.born}</td>\n+            <td>{person.died}</td>\n+            <td>\n+              <PersonLink person={person.motherName} people={people} />\n+            </td>\n+            <td>\n+              <PersonLink person={person.fatherName} people={people} />\n+            </td>\n+          </tr>\n+        ))}\n+      </tbody>\n+    </table>\n+  );\n+};\n+\n+const App = () => (\n+  <div data-cy=\"app\">\n+    <HashRouter>\n+      <Navbar />\n+      <Routes>\n+        <Route path=\"/\" element={<Navigate to=\"/home\" replace />} />\n+        <Route path=\"/home\" element={<HomePage />} />\n+        <Route path=\"/people\" element={<PeoplePage />} />\n+        <Route path=\"*\" element={<NotFoundPage />} />\n+      </Routes>\n+    </HashRouter>\n+  </div>\n+);\n"
                },
                {
                    "date": 1715766362211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,125 @@\n+import React, { useState, useEffect } from 'react';\n+import { HashRouter, Routes, Route, Navigate } from 'react-router-dom';\n+import { Loader } from './components/Loader';\n+import './App.scss';\n+\n+export const Navbar = () => {\n+  return (\n+    <nav className=\"navbar is-fixed-top has-shadow\" role=\"navigation\" aria-label=\"main navigation\">\n+      <div className=\"container\">\n+        <div className=\"navbar-brand\">\n+          <a className=\"navbar-item\" href=\"#/\">\n+            Home\n+          </a>\n+          <a className=\"navbar-item has-background-grey-lighter\" href=\"#/people\">\n+            People\n+          </a>\n+        </div>\n+      </div>\n+    </nav>\n+  );\n+};\n+\n+const HomePage = () => <h1 className=\"title\">Home Page</h1>;\n+\n+const PeoplePage = () => {\n+  const [people, setPeople] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(null);\n+\n+  useEffect(() => {\n+    const fetchData = async () => {\n+      try {\n+        const response = await fetch('https://mate-academy.github.io/react_people-table/api/people.json');\n+        if (!response.ok) {\n+          throw new Error('Failed to fetch data');\n+        }\n+        const data = await response.json();\n+        setPeople(data);\n+        setLoading(false);\n+      } catch (error) {\n+        setError(error.message);\n+        setLoading(false);\n+      }\n+    };\n+\n+    fetchData();\n+  }, []);\n+\n+  return (\n+    <div className=\"container\">\n+      <h1 className=\"title\">People Page</h1>\n+      {loading ? (\n+        <Loader />\n+      ) : error ? (\n+        <p className=\"has-text-danger\">{error}</p>\n+      ) : (\n+        <PeopleTable people={people} />\n+      )}\n+    </div>\n+  );\n+};\n+\n+const NotFoundPage = () => <h1 className=\"title\">Page not found</h1>;\n+\n+const PersonLink = ({ person, people }) => {\n+  const foundPerson = people.find(p => p.name === person);\n+\n+  if (foundPerson) {\n+    const url = `#/people/${foundPerson.slug}`;\n+    return <a href={url} className={foundPerson.sex === 'f' ? 'has-text-danger' : ''}>{person}</a>;\n+  } else {\n+    return <span>{person}</span>;\n+  }\n+};\n+\n+const PeopleTable = ({ people }) => {\n+  const [selectedPerson, setSelectedPerson] = useState(null);\n+\n+  return (\n+    <table className=\"table is-striped is-hoverable is-narrow is-fullwidth\">\n+      <thead>\n+        <tr>\n+          <th>Name</th>\n+          <th>Sex</th>\n+          <th>Born</th>\n+          <th>Died</th>\n+          <th>Mother</th>\n+          <th>Father</th>\n+        </tr>\n+      </thead>\n+      <tbody>\n+        {people.map(person => (\n+          <tr key={person.slug} className={selectedPerson === person.slug ? 'has-background-warning' : ''}>\n+            <td>\n+              <PersonLink person={person.name} people={people} />\n+            </td>\n+            <td>{person.sex}</td>\n+            <td>{person.born}</td>\n+            <td>{person.died}</td>\n+            <td>\n+              <PersonLink person={person.motherName} people={people} />\n+            </td>\n+            <td>\n+              <PersonLink person={person.fatherName} people={people} />\n+            </td>\n+          </tr>\n+        ))}\n+      </tbody>\n+    </table>\n+  );\n+};\n+\n+export const App = () => (\n+  <div data-cy=\"app\">\n+    <HashRouter>\n+      <Navbar />\n+      <Routes>\n+        <Route path=\"/\" element={<Navigate to=\"/home\" replace />} />\n+        <Route path=\"/home\" element={<HomePage />} />\n+        <Route path=\"/people\" element={<PeoplePage />} />\n+        <Route path=\"*\" element={<NotFoundPage />} />\n+      </Routes>\n+    </HashRouter>\n+  </div>\n+);\n"
                },
                {
                    "date": 1715938412484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,522 +1,10 @@\n-import React, { useState, useEffect } from 'react';\n-import { HashRouter, Routes, Route, Navigate } from 'react-router-dom';\n-import { Loader } from './components/Loader';\n import './App.scss';\n+import { MainSection } from './components/MainSection/MainSection';\n+import { Navbar } from './components/Navbar/Navbar';\n \n-export const Navbar = () => {\n-  return (\n-    <nav className=\"navbar is-fixed-top has-shadow\" role=\"navigation\" aria-label=\"main navigation\">\n-      <div className=\"container\">\n-        <div className=\"navbar-brand\">\n-          <a className=\"navbar-item\" href=\"#/\">\n-            Home\n-          </a>\n-          <a className=\"navbar-item has-background-grey-lighter\" href=\"#/people\">\n-            People\n-          </a>\n-        </div>\n-      </div>\n-    </nav>\n-  );\n-};\n-\n-const HomePage = () => <h1 className=\"title\">Home Page</h1>;\n-\n-const PeoplePage = () => {\n-  const [people, setPeople] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const [error, setError] = useState(null);\n-\n-  useEffect(() => {\n-    const fetchData = async () => {\n-      try {\n-        const response = await fetch('https://mate-academy.github.io/react_people-table/api/people.json');\n-        if (!response.ok) {\n-          throw new Error('Failed to fetch data');\n-        }\n-        const data = await response.json();\n-        setPeople(data);\n-        setLoading(false);\n-      } catch (error) {\n-        setError(error.message);\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchData();\n-  }, []);\n-\n-  return (\n-    <div className=\"container\">\n-      <h1 className=\"title\">People Page</h1>\n-      {loading ? (\n-        <Loader />\n-      ) : error ? (\n-        <p className=\"has-text-danger\">{error}</p>\n-      ) : (\n-        <PeopleTable people={people} />\n-      )}\n-    </div>\n-  );\n-};\n-\n-const NotFoundPage = () => <h1 className=\"title\">Page not found</h1>;\n-\n-const PersonLink = ({ person, people }) => {\n-  const foundPerson = people.find(p => p.name === person);\n-\n-  if (foundPerson) {\n-    const url = `#/people/${foundPerson.slug}`;\n-    return <a href={url} className={foundPerson.sex === 'f' ? 'has-text-danger' : ''}>{person}</a>;\n-  } else {\n-    return <span>{person}</span>;\n-  }\n-};\n-\n-const PeopleTable = ({ people }) => {\n-  const [selectedPerson, setSelectedPerson] = useState(null);\n-\n-  return (\n-    <table className=\"table is-striped is-hoverable is-narrow is-fullwidth\">\n-      <thead>\n-        <tr>\n-          <th>Name</th>\n-          <th>Sex</th>\n-          <th>Born</th>\n-          <th>Died</th>\n-          <th>Mother</th>\n-          <th>Father</th>\n-        </tr>\n-      </thead>\n-      <tbody>\n-        {people.map(person => (\n-          <tr key={person.slug} className={selectedPerson === person.slug ? 'has-background-warning' : ''}>\n-            <td>\n-              <PersonLink person={person.name} people={people} />\n-            </td>\n-            <td>{person.sex}</td>\n-            <td>{person.born}</td>\n-            <td>{person.died}</td>\n-            <td>\n-              <PersonLink person={person.motherName} people={people} />\n-            </td>\n-            <td>\n-              <PersonLink person={person.fatherName} people={people} />\n-            </td>\n-          </tr>\n-        ))}\n-      </tbody>\n-    </table>\n-  );\n-};\n-\n export const App = () => (\n   <div data-cy=\"app\">\n-    <HashRouter>\n-      <Navbar />\n-      <Routes>\n-        <Route path=\"/\" element={<Navigate to=\"/home\" replace />} />\n-        <Route path=\"/home\" element={<HomePage />} />\n-        <Route path=\"/people\" element={<PeoplePage />} />\n-        <Route path=\"*\" element={<NotFoundPage />} />\n-      </Routes>\n-    </HashRouter>\n+    <Navbar />\n+    <MainSection />\n   </div>\n );\n-import React, { useState, useEffect } from 'react';\n-import { HashRouter, Routes, Route, Navigate } from 'react-router-dom';\n-import { Loader } from './components/Loader';\n-import './App.scss';\n-\n-export const Navbar = () => {\n-  return (\n-    <nav className=\"navbar is-fixed-top has-shadow\" role=\"navigation\" aria-label=\"main navigation\">\n-      <div className=\"container\">\n-        <div className=\"navbar-brand\">\n-          <a className=\"navbar-item\" href=\"#/\">\n-            Home\n-          </a>\n-          <a className=\"navbar-item has-background-grey-lighter\" href=\"#/people\">\n-            People\n-          </a>\n-        </div>\n-      </div>\n-    </nav>\n-  );\n-};\n-\n-const HomePage = () => <h1 className=\"title\">Home Page</h1>;\n-\n-const PeoplePage = () => {\n-  const [people, setPeople] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const [error, setError] = useState(null);\n-\n-  useEffect(() => {\n-    const fetchData = async () => {\n-      try {\n-        const response = await fetch('https://mate-academy.github.io/react_people-table/api/people.json');\n-        if (!response.ok) {\n-          throw new Error('Failed to fetch data');\n-        }\n-        const data = await response.json();\n-        setPeople(data);\n-        setLoading(false);\n-      } catch (error) {\n-        setError(error.message);\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchData();\n-  }, []);\n-\n-  return (\n-    <div className=\"container\">\n-      <h1 className=\"title\">People Page</h1>\n-      {loading ? (\n-        <Loader />\n-      ) : error ? (\n-        <p className=\"has-text-danger\">{error}</p>\n-      ) : (\n-        <PeopleTable people={people} />\n-      )}\n-    </div>\n-  );\n-};\n-\n-const NotFoundPage = () => <h1 className=\"title\">Page not found</h1>;\n-\n-const PersonLink = ({ person, people }) => {\n-  const foundPerson = people.find(p => p.name === person);\n-\n-  if (foundPerson) {\n-    const url = `#/people/${foundPerson.slug}`;\n-    return <a href={url} className={foundPerson.sex === 'f' ? 'has-text-danger' : ''}>{person}</a>;\n-  } else {\n-    return <span>{person}</span>;\n-  }\n-};\n-\n-const PeopleTable = ({ people }) => {\n-  const [selectedPerson, setSelectedPerson] = useState(null);\n-\n-  return (\n-    <table className=\"table is-striped is-hoverable is-narrow is-fullwidth\">\n-      <thead>\n-        <tr>\n-          <th>Name</th>\n-          <th>Sex</th>\n-          <th>Born</th>\n-          <th>Died</th>\n-          <th>Mother</th>\n-          <th>Father</th>\n-        </tr>\n-      </thead>\n-      <tbody>\n-        {people.map(person => (\n-          <tr key={person.slug} className={selectedPerson === person.slug ? 'has-background-warning' : ''}>\n-            <td>\n-              <PersonLink person={person.name} people={people} />\n-            </td>\n-            <td>{person.sex}</td>\n-            <td>{person.born}</td>\n-            <td>{person.died}</td>\n-            <td>\n-              <PersonLink person={person.motherName} people={people} />\n-            </td>\n-            <td>\n-              <PersonLink person={person.fatherName} people={people} />\n-            </td>\n-          </tr>\n-        ))}\n-      </tbody>\n-    </table>\n-  );\n-};\n-\n-const App = () => (\n-  <div data-cy=\"app\">\n-    <HashRouter>\n-      <Navbar />\n-      <Routes>\n-        <Route path=\"/\" element={<Navigate to=\"/home\" replace />} />\n-        <Route path=\"/home\" element={<HomePage />} />\n-        <Route path=\"/people\" element={<PeoplePage />} />\n-        <Route path=\"*\" element={<NotFoundPage />} />\n-      </Routes>\n-    </HashRouter>\n-  </div>\n-);\n-import React, { useState, useEffect } from 'react';\n-import { HashRouter, Routes, Route, Navigate } from 'react-router-dom';\n-import { Loader } from './components/Loader';\n-import './App.scss';\n-\n-export const Navbar = () => {\n-  return (\n-    <nav className=\"navbar is-fixed-top has-shadow\" role=\"navigation\" aria-label=\"main navigation\">\n-      <div className=\"container\">\n-        <div className=\"navbar-brand\">\n-          <a className=\"navbar-item\" href=\"#/\">\n-            Home\n-          </a>\n-          <a className=\"navbar-item has-background-grey-lighter\" href=\"#/people\">\n-            People\n-          </a>\n-        </div>\n-      </div>\n-    </nav>\n-  );\n-};\n-\n-const HomePage = () => <h1 className=\"title\">Home Page</h1>;\n-\n-const PeoplePage = () => {\n-  const [people, setPeople] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const [error, setError] = useState(null);\n-\n-  useEffect(() => {\n-    const fetchData = async () => {\n-      try {\n-        const response = await fetch('https://mate-academy.github.io/react_people-table/api/people.json');\n-        if (!response.ok) {\n-          throw new Error('Failed to fetch data');\n-        }\n-        const data = await response.json();\n-        setPeople(data);\n-        setLoading(false);\n-      } catch (error) {\n-        setError(error.message);\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchData();\n-  }, []);\n-\n-  return (\n-    <div className=\"container\">\n-      <h1 className=\"title\">People Page</h1>\n-      {loading ? (\n-        <Loader />\n-      ) : error ? (\n-        <p className=\"has-text-danger\">{error}</p>\n-      ) : (\n-        <PeopleTable people={people} />\n-      )}\n-    </div>\n-  );\n-};\n-\n-const NotFoundPage = () => <h1 className=\"title\">Page not found</h1>;\n-\n-const PersonLink = ({ person, people }) => {\n-  const foundPerson = people.find(p => p.name === person);\n-\n-  if (foundPerson) {\n-    const url = `#/people/${foundPerson.slug}`;\n-    return <a href={url} className={foundPerson.sex === 'f' ? 'has-text-danger' : ''}>{person}</a>;\n-  } else {\n-    return <span>{person}</span>;\n-  }\n-};\n-\n-const PeopleTable = ({ people }) => {\n-  const [selectedPerson, setSelectedPerson] = useState(null);\n-\n-  return (\n-    <table className=\"table is-striped is-hoverable is-narrow is-fullwidth\">\n-      <thead>\n-        <tr>\n-          <th>Name</th>\n-          <th>Sex</th>\n-          <th>Born</th>\n-          <th>Died</th>\n-          <th>Mother</th>\n-          <th>Father</th>\n-        </tr>\n-      </thead>\n-      <tbody>\n-        {people.map(person => (\n-          <tr key={person.slug} className={selectedPerson === person.slug ? 'has-background-warning' : ''}>\n-            <td>\n-              <PersonLink person={person.name} people={people} />\n-            </td>\n-            <td>{person.sex}</td>\n-            <td>{person.born}</td>\n-            <td>{person.died}</td>\n-            <td>\n-              <PersonLink person={person.motherName} people={people} />\n-            </td>\n-            <td>\n-              <PersonLink person={person.fatherName} people={people} />\n-            </td>\n-          </tr>\n-        ))}\n-      </tbody>\n-    </table>\n-  );\n-};\n-\n-const App = () => (\n-  <div data-cy=\"app\">\n-    <HashRouter>\n-      <Navbar />\n-      <Routes>\n-        <Route path=\"/\" element={<Navigate to=\"/home\" replace />} />\n-        <Route path=\"/home\" element={<HomePage />} />\n-        <Route path=\"/people\" element={<PeoplePage />} />\n-        <Route path=\"*\" element={<NotFoundPage />} />\n-      </Routes>\n-    </HashRouter>\n-  </div>\n-);\n-\n-export default App;\n-import React, { useState, useEffect } from 'react';\n-import { HashRouter, Routes, Route, Navigate } from 'react-router-dom';\n-import { Loader } from './components/Loader';\n-import './App.scss';\n-\n-const Navbar = () => {\n-  return (\n-    <nav className=\"navbar is-fixed-top has-shadow\" role=\"navigation\" aria-label=\"main navigation\">\n-      <div className=\"container\">\n-        <div className=\"navbar-brand\">\n-          <a className=\"navbar-item\" href=\"#/\">\n-            Home\n-          </a>\n-          <a className=\"navbar-item has-background-grey-lighter\" href=\"#/people\">\n-            People\n-          </a>\n-        </div>\n-      </div>\n-    </nav>\n-  );\n-};\n-\n-const HomePage = () => <h1 className=\"title\">Home Page</h1>;\n-\n-const PeoplePage = () => {\n-  const [people, setPeople] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const [error, setError] = useState(null);\n-\n-  useEffect(() => {\n-    const fetchData = async () => {\n-      try {\n-        const response = await fetch('https://mate-academy.github.io/react_people-table/api/people.json');\n-        if (!response.ok) {\n-          throw new Error('Failed to fetch data');\n-        }\n-        const data = await response.json();\n-        setPeople(data);\n-        setLoading(false);\n-      } catch (error) {\n-        setError(error.message);\n-        setLoading(false);\n-      }\n-    };\n-\n-    fetchData();\n-  }, []);\n-\n-  return (\n-    <div className=\"container\">\n-      <h1 className=\"title\">People Page</h1>\n-      {loading ? (\n-        <Loader />\n-      ) : error ? (\n-        <p className=\"has-text-danger\">{error}</p>\n-      ) : (\n-        <PeopleTable people={people} />\n-      )}\n-    </div>\n-  );\n-};\n-\n-const NotFoundPage = () => <h1 className=\"title\">Page not found</h1>;\n-\n-const PersonLink = ({ person, people }) => {\n-  const foundPerson = people.find(p => p.name === person);\n-\n-  if (foundPerson) {\n-    const url = `#/people/${foundPerson.slug}`;\n-    return <a href={url} className={foundPerson.sex === 'f' ? 'has-text-danger' : ''}>{person}</a>;\n-  } else {\n-    return <span>{person}</span>;\n-  }\n-};\n-\n-const PeopleTable = ({ people }) => {\n-  const [selectedPerson, setSelectedPerson] = useState(null);\n-\n-  return (\n-    <table className=\"table is-striped is-hoverable is-narrow is-fullwidth\">\n-      <thead>\n-        <tr>\n-          <th>Name</th>\n-          <th>Sex</th>\n-          <th>Born</th>\n-          <th>Died</th>\n-          <th>Mother</th>\n-          <th>Father</th>\n-        </tr>\n-      </thead>\n-      <tbody>\n-        {people.map(person => (\n-          <tr key={person.slug} className={selectedPerson === person.slug ? 'has-background-warning' : ''}>\n-            <td>\n-              <PersonLink person={person.name} people={people} />\n-            </td>\n-            <td>{person.sex}</td>\n-            <td>{person.born}</td>\n-            <td>{person.died}</td>\n-            <td>\n-              <PersonLink person={person.motherName} people={people} />\n-            </td>\n-            <td>\n-              <PersonLink person={person.fatherName} people={people} />\n-            </td>\n-          </tr>\n-        ))}\n-      </tbody>\n-    </table>\n-  );\n-};\n-\n-const App = () => (\n-  <div data-cy=\"app\">\n-    <HashRouter>\n-      <Navbar />\n-      <Routes>\n-        <Route path=\"/\" element={<Navigate to=\"/home\" replace />} />\n-        <Route path=\"/home\" element={<HomePage />} />\n-        <Route path=\"/people\" element={<PeoplePage />} />\n-        <Route path=\"*\" element={<NotFoundPage />} />\n-      </Routes>\n-    </HashRouter>\n-  </div>\n-);\n-\n-export default App;\n-\n-Implement the `App` with 2 pages and ability to select a person in the table.\n-\n-1. Create the `HomePage` available at `/` with just a title `Home Page`\n-1. Create the `PeoplePage` available at `/people` with a title `People Page`\n-1. Use [Navigate](https://reactrouter.com/docs/en/v6/components/navigate) component to redirect from `/home` to `/`;\n-    - add `replace` attribute not to save `/home` URL in the [browser history](https://reactrouter.com/en/main/start/tutorial#managing-the-history-stack) and avoid navigation loop when you press browser `Go back` button.\n-1. Implement `NotFoundPage` with a title `Page not found` that is shown for all the other URLs;\n-1. Add the `Navbar` with 2 links `Home` and `People`. Active one should have the `has-background-grey-lighter` class;\n-1. Use `HashRouter` to be able to share a link to any page on Github pages;\n-1. Fetch `people` from [the API](https://mate-academy.github.io/react_people-table/api/people.json) when `PeoplePage` is opened;\n-1. Pass `people` to `PeopleTable` component and render as a table (see the given markup);\n-1. Make each name in the table a link a to `/people/:slug` (including mother and father)\n-    - create the `<PersonLink person={person} />` and use it for all existing people;\n-    - add the `has-text-danger` class for women names;\n-    - if there is no person with a given name among the people just keep the name as a text (not a link);\n-    - if the motherName or fatherName is empty put `-` to the table\n-1. Highlight the row of the selected person with the `has-background-warning` class;\n"
                },
                {
                    "date": 1715938839463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import './App.scss';\n-import { MainSection } from './components/MainSection/MainSection';\n+import { MainSection } from './components/MainSection';\n import { Navbar } from './components/Navbar/Navbar';\n \n export const App = () => (\n   <div data-cy=\"app\">\n"
                },
                {
                    "date": 1715938847280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,10 @@\n+import './App.scss';\n+import { MainSection } from './components/Main';\n+import { Navbar } from './components/Nav';\n+\n+export const App = () => (\n+  <div data-cy=\"app\">\n+    <Navbar />\n+    <MainSection />\n+  </div>\n+);\n"
                },
                {
                    "date": 1715938853741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,10 @@\n+import './App.scss';\n+import { MainSection } from './components/Main';\n+import { Navbar } from './components/Nav';\n+\n+export const App = () => (\n+  <div data-cy=\"app\">\n+    <Na />\n+    <MainSection />\n+  </div>\n+);\n"
                },
                {
                    "date": 1715938859235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import './App.scss';\n import { MainSection } from './components/Main';\n-import { Navbar } from './components/Nav';\n+import { Nav } from './components/Nav';\n \n export const App = () => (\n   <div data-cy=\"app\">\n     <Nav />\n"
                },
                {
                    "date": 1715938873797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,11 @@\n+import React from 'react';\n+import './App.scss';\n+import { MainSection } from './components/Main';\n+import { Nav } from './components/Nav';\n+\n+export const App = () => (\n+  <div data-cy=\"app\">\n+    <Nav />\n+    <MainSection />\n+  </div>\n+);\n"
                }
            ],
            "date": 1715766020363,
            "name": "Commit-0",
            "content": "import { Loader } from './components/Loader';\n\nimport './App.scss';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <a className=\"navbar-item\" href=\"#/\">\n            Home\n          </a>\n\n          <a\n            className=\"navbar-item has-background-grey-lighter\"\n            href=\"#/people\"\n          >\n            People\n          </a>\n        </div>\n      </div>\n    </nav>\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <h1 className=\"title\">Home Page</h1>\n        <h1 className=\"title\">People Page</h1>\n        <h1 className=\"title\">Page not found</h1>\n\n        <div className=\"block\">\n          <div className=\"box table-container\">\n            <Loader />\n\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n\n            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n\n            <table\n              data-cy=\"peopleTable\"\n              className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n            >\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Sex</th>\n                  <th>Born</th>\n                  <th>Died</th>\n                  <th>Mother</th>\n                  <th>Father</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                <tr data-cy=\"person\">\n                  <td>\n                    <a href=\"#/people/jan-van-brussel-1714\">Jan van Brussel</a>\n                  </td>\n\n                  <td>m</td>\n                  <td>1714</td>\n                  <td>1748</td>\n                  <td>Joanna van Rooten</td>\n                  <td>Jacobus van Brussel</td>\n                </tr>\n\n                <tr data-cy=\"person\">\n                  <td>\n                    <a href=\"#/people/philibert-haverbeke-1907\">\n                      Philibert Haverbeke\n                    </a>\n                  </td>\n\n                  <td>m</td>\n                  <td>1907</td>\n                  <td>1997</td>\n\n                  <td>\n                    <a\n                      className=\"has-text-danger\"\n                      href=\"#/people/emma-de-milliano-1876\"\n                    >\n                      Emma de Milliano\n                    </a>\n                  </td>\n\n                  <td>\n                    <a href=\"#/people/emile-haverbeke-1877\">Emile Haverbeke</a>\n                  </td>\n                </tr>\n\n                <tr data-cy=\"person\" className=\"has-background-warning\">\n                  <td>\n                    <a href=\"#/people/jan-frans-van-brussel-1761\">\n                      Jan Frans van Brussel\n                    </a>\n                  </td>\n\n                  <td>m</td>\n                  <td>1761</td>\n                  <td>1833</td>\n                  <td>-</td>\n\n                  <td>\n                    <a href=\"#/people/jacobus-bernardus-van-brussel-1736\">\n                      Jacobus Bernardus van Brussel\n                    </a>\n                  </td>\n                </tr>\n\n                <tr data-cy=\"person\">\n                  <td>\n                    <a\n                      className=\"has-text-danger\"\n                      href=\"#/people/lievijne-jans-1542\"\n                    >\n                      Lievijne Jans\n                    </a>\n                  </td>\n\n                  <td>f</td>\n                  <td>1542</td>\n                  <td>1582</td>\n                  <td>-</td>\n                  <td>-</td>\n                </tr>\n\n                <tr data-cy=\"person\">\n                  <td>\n                    <a href=\"#/people/bernardus-de-causmaecker-1721\">\n                      Bernardus de Causmaecker\n                    </a>\n                  </td>\n\n                  <td>m</td>\n                  <td>1721</td>\n                  <td>1789</td>\n\n                  <td>\n                    <a\n                      className=\"has-text-danger\"\n                      href=\"#/people/livina-haverbeke-1692\"\n                    >\n                      Livina Haverbeke\n                    </a>\n                  </td>\n\n                  <td>\n                    <a href=\"#/people/lieven-de-causmaecker-1696\">\n                      Lieven de Causmaecker\n                    </a>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </main>\n  </div>\n);\n\nImplement the `App` with 2 pages and ability to select a person in the table.\n\n1. Create the `HomePage` available at `/` with just a title `Home Page`\n1. Create the `PeoplePage` available at `/people` with a title `People Page`\n1. Use [Navigate](https://reactrouter.com/docs/en/v6/components/navigate) component to redirect from `/home` to `/`;\n    - add `replace` attribute not to save `/home` URL in the [browser history](https://reactrouter.com/en/main/start/tutorial#managing-the-history-stack) and avoid navigation loop when you press browser `Go back` button.\n1. Implement `NotFoundPage` with a title `Page not found` that is shown for all the other URLs;\n1. Add the `Navbar` with 2 links `Home` and `People`. Active one should have the `has-background-grey-lighter` class;\n1. Use `HashRouter` to be able to share a link to any page on Github pages;\n1. Fetch `people` from [the API](https://mate-academy.github.io/react_people-table/api/people.json) when `PeoplePage` is opened;\n1. Pass `people` to `PeopleTable` component and render as a table (see the given markup);\n1. Make each name in the table a link a to `/people/:slug` (including mother and father)\n    - create the `<PersonLink person={person} />` and use it for all existing people;\n    - add the `has-text-danger` class for women names;\n    - if there is no person with a given name among the people just keep the name as a text (not a link);\n    - if the motherName or fatherName is empty put `-` to the table\n1. Highlight the row of the selected person with the `has-background-warning` class;\n"
        }
    ]
}